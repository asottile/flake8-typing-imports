#!/usr/bin/env python3
from __future__ import annotations

import argparse
import json
import re
import subprocess

TAG_RE = re.compile(r'^v[0-9.]+$')


def get_tag_list(repo: str) -> tuple[str, ...]:
    subprocess.check_call(('git', '-C', repo, 'fetch', '-q', '--tags'))
    out = subprocess.check_output(('git', '-C', repo, 'tag', '--list'))
    return tuple(out.decode().splitlines())


PROG = '''\
import json
import sys
import types

_typing = types.ModuleType('typing')
exec(compile(sys.stdin.read(), '<typing>', 'exec'), _typing.__dict__)

lst = []

# populate lazy attributes (Match, Pattern, etc.)
if sys.version_info >= (3, 13):
    for k in _typing.__all__:
        getattr(_typing, k)
else:
    lst.extend(_typing.io.__all__)
    lst.extend(_typing.re.__all__)

lst.extend([
    k for k, v in vars(_typing).items()
    if k not in {'io', 're'}
    if k in _typing.__all__ or (
        # avoid private names
        not k.startswith('_') and
        # there's a few types and metaclasses that aren't exported
        not k.endswith(('Meta', '_contra', '_co')) and
        not k.upper() == k and
        # but export all things that have __module__ == 'typing'
        getattr(v, '__module__', None) == _typing.__name__
    )
])
print(json.dumps(lst))
'''


def get_defined_names(v: tuple[int, ...], s: bytes) -> set[str]:
    """The __all__ of typing is very unreliable: bpo-36983"""
    vstr = '{}.{}'.format(*v)
    # my computer no longer has python <3.7
    if v < (3, 7):
        preamble: tuple[str, ...]
        preamble = ('docker', 'run', '--rm', '-i', f'python:{vstr}-slim')
    else:
        preamble = ()
    proc = subprocess.run(
        (*preamble, f'python{vstr}', '-c', PROG),
        input=s,
        stdout=subprocess.PIPE,
        check=True,
    )
    ret = set(json.loads(proc.stdout))
    # Final in these versions isn't the type it eventually becomes
    if v < (3, 5, 3):
        ret.discard('Final')
    return ret


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument('cpython')
    args = parser.parse_args()

    ret = []
    for tag in get_tag_list(args.cpython):
        if not TAG_RE.match(tag):
            continue
        version = tuple(int(p) for p in tag[1:].split('.'))
        if version < (3, 5):
            continue
        cmd = ('git', '-C', args.cpython, 'show', f'{tag}:Lib/typing.py')
        names = get_defined_names(version, subprocess.check_output(cmd))
        ret.append((version, names))

    def _add_symbols(symbols: list[str]) -> None:
        accum = f'        {symbols[0]!r},'
        for symbol in symbols[1:]:
            if len(accum) + len(repr(symbol)) + 2 < 80:
                accum += f' {symbol!r},'
            else:
                parts.append(f'{accum}')
                accum = f'        {symbol!r},'
        parts.append(f'{accum}')

    parts = ['SYMBOLS = []']
    prev: set[str] = set()
    for version, symbols_set in sorted(ret):
        vstr = ', '.join(str(p) for p in version)
        if version[-1] == 0:
            parts.append('SYMBOLS.append((')
            parts.append(f'    Version({vstr}), frozenset((')
            _add_symbols(sorted(symbols_set))
            parts.append('    )),')
            parts.append('))')
        else:
            assert symbols_set >= prev, version
            if symbols_set == prev:
                parts.append(
                    f'SYMBOLS.append((Version({vstr}), SYMBOLS[-1][1]))',
                )
            else:
                syms = ', '.join(repr(s) for s in sorted(symbols_set - prev))
                if ',' not in syms:
                    syms = f'{syms},'
                parts.append('SYMBOLS.append((')
                parts.append(f'    Version({vstr}), SYMBOLS[-1][1].union((')
                _add_symbols(sorted(symbols_set - prev))
                parts.append('    )),')
                parts.append('))')
        prev = symbols_set

    new = '\n'.join(parts) + '\n'

    with open('flake8_typing_imports.py') as f:
        contents = f.read()

    p1, p2, rest = contents.partition('# GENERATED BY ./bin/build-generated\n')
    old, p3, p4 = rest.partition('# END GENERATED\n')

    with open('flake8_typing_imports.py', 'w') as f:
        f.write(p1 + p2 + new + p3 + p4)

    return 0


if __name__ == '__main__':
    raise SystemExit(main())
